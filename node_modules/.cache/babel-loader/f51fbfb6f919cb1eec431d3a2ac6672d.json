{"remainingRequest":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/thread-loader/dist/cjs.js!/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/babel-loader/lib/index.js!/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/src/components/MessageDisplay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/src/components/MessageDisplay.vue","mtime":1601960433270},{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/huynhbinh/GHN/Internal-Tool/vue-quick-chat/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapMutations } from 'vuex';\nimport { DateTime } from \"luxon\";\nimport MyMessage from \"./MyMessage.vue\";\nimport OtherMessage from \"./OtherMessage.vue\";\nexport default {\n  components: {\n    MyMessage: MyMessage,\n    OtherMessage: OtherMessage\n  },\n  props: {\n    colors: {\n      type: Object,\n      required: true\n    },\n    asyncMode: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    loadMoreMessages: {\n      type: Function,\n      required: false,\n      default: null\n    },\n\n    /* onImageClicked: {\n        type: Function,\n        required: false,\n        default: null\n    }, */\n    scrollBottom: {\n      type: Object,\n      required: true\n    },\n    profilePictureConfig: {\n      type: Object,\n      required: true\n    },\n    timestampConfig: {\n      type: Object,\n      required: true\n    },\n    linkOptions: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      updateScroll: true,\n      lastMessage: null,\n      loading: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['getParticipantById', 'messages', 'myself'])),\n  mounted: function mounted() {\n    this.goToBottom();\n    this.$refs.containerMessageDisplay.dispatchEvent(new CustomEvent('scroll'));\n  },\n  updated: function updated() {\n    if (this.messages.length && !this.messageCompare(this.messages[this.messages.length - 1], this.lastMessage)) {\n      if (this.updateScroll || this.scrollBottom.messageSent && this.messages[this.messages.length - 1].participantId == this.myself.id || this.scrollBottom.messageReceived && this.messages[this.messages.length - 1].participantId != this.myself.id) {\n        this.goToBottom();\n\n        if (this.messages.length) {\n          this.lastMessage = this.messages[this.messages.length - 1];\n        }\n      }\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapMutations(['setMessages'])), {}, {\n    /**\n     * This function compare two messages without looking at the uploaded propertie.\n     * This function has been implemented to prevent chat scrolling down after changing the message from 'uploaded = false' to 'uploaded = true'.\n     * @param {Object} message1 the first message object \n     * @param {Object} message2 the second message object\n     * @return {Boolean} true if the messages are equal and false if they are different\n     */\n    messageCompare: function messageCompare(message1, message2) {\n      /**\n       * if one of the messages are null, you can safely compare the messages with '==='\n       */\n      if (!message2 || !message1) {\n        return message1 === message2;\n      }\n      /**\n       * compare the immutable properties of a message\n       */\n\n\n      var participant_equal = message1.participantId == message2.participantId;\n      var content_equal = message1.content == message2.content;\n      var timestamp_equal = message1.timestamp.valueOf() === message2.timestamp.valueOf();\n      return participant_equal && content_equal && timestamp_equal;\n    },\n    updateScrollState: function updateScrollState(_ref) {\n      var _this = this;\n\n      var _ref$target = _ref.target,\n          scrollTop = _ref$target.scrollTop,\n          clientHeight = _ref$target.clientHeight,\n          scrollHeight = _ref$target.scrollHeight;\n      this.updateScroll = scrollTop + clientHeight >= scrollHeight;\n\n      if (typeof this.loadMoreMessages === 'function' && scrollTop < 20) {\n        this.loading = true;\n        this.loadMoreMessages(function (messages) {\n          //if (Array.isArray(messages) && messages.length > 0) {\n\n          /** \n           * this code will be removed before the next release\n           * \n           * this line is commented because the setMessages is already called\n           * when 'this.messages.unshift(...this.toLoad)' is executed at App.vue line 177\n           * it was executing the same function twice, causing unexpected behavior with Luxon date objects\n          */\n          //this.setMessages([...messages, ...this.messages]);\n          //}\n          _this.loading = false;\n        });\n      }\n    },\n    goToBottom: function goToBottom() {\n      var scrollDiv = this.$refs.containerMessageDisplay;\n      scrollDiv.scrollTop = scrollDiv.scrollHeight;\n      this.updateScroll = false;\n    },\n    onImageClicked: function onImageClicked(message) {\n      this.$emit(\"onImageClicked\", message);\n    }\n  })\n};",{"version":3,"sources":["MessageDisplay.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAA,UAAA,EAAA,YAAA,QAAA,MAAA;AACA,SAAA,QAAA,QAAA,OAAA;AACA,OAAA,SAAA;AACA,OAAA,YAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,YAAA,EAAA;AAFA,GADA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KALA;AAUA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KAVA;;AAeA;;;;;AAKA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KApBA;AAwBA,IAAA,oBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAxBA;AA4BA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KA5BA;AAgCA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAhCA,GALA;AA0CA,EAAA,IA1CA,kBA0CA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,IADA;AAEA,MAAA,WAAA,EAAA,IAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KAAA;AAKA,GAhDA;AAiDA,EAAA,QAAA,oBACA,UAAA,CAAA,CACA,oBADA,EAEA,UAFA,EAGA,QAHA,CAAA,CADA,CAjDA;AAwDA,EAAA,OAxDA,qBAwDA;AACA,SAAA,UAAA;AACA,SAAA,KAAA,CAAA,uBAAA,CAAA,aAAA,CAAA,IAAA,WAAA,CAAA,QAAA,CAAA;AACA,GA3DA;AA4DA,EAAA,OA5DA,qBA4DA;AACA,QAAA,KAAA,QAAA,CAAA,MAAA,IAAA,CAAA,KAAA,cAAA,CAAA,KAAA,QAAA,CAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,EAAA,KAAA,WAAA,CAAA,EAAA;AAEA,UAAA,KAAA,YAAA,IAAA,KAAA,YAAA,CAAA,WAAA,IAAA,KAAA,QAAA,CAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA,aAAA,IAAA,KAAA,MAAA,CAAA,EAAA,IAAA,KAAA,YAAA,CAAA,eAAA,IAAA,KAAA,QAAA,CAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA,aAAA,IAAA,KAAA,MAAA,CAAA,EAAA,EAAA;AACA,aAAA,UAAA;;AACA,YAAA,KAAA,QAAA,CAAA,MAAA,EAAA;AACA,eAAA,WAAA,GAAA,KAAA,QAAA,CAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA;AACA;AACA,GAtEA;AAuEA,EAAA,OAAA,kCACA,YAAA,CAAA,CACA,aADA,CAAA,CADA;AAIA;;;;;;;AAOA,IAAA,cAXA,0BAWA,QAXA,EAWA,QAXA,EAWA;AACA;;;AAGA,UAAA,CAAA,QAAA,IAAA,CAAA,QAAA,EAAA;AACA,eAAA,QAAA,KAAA,QAAA;AACA;AACA;;;;;AAGA,UAAA,iBAAA,GAAA,QAAA,CAAA,aAAA,IAAA,QAAA,CAAA,aAAA;AACA,UAAA,aAAA,GAAA,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA;AACA,UAAA,eAAA,GAAA,QAAA,CAAA,SAAA,CAAA,OAAA,OAAA,QAAA,CAAA,SAAA,CAAA,OAAA,EAAA;AAEA,aAAA,iBAAA,IAAA,aAAA,IAAA,eAAA;AACA,KA1BA;AA2BA,IAAA,iBA3BA,mCA2BA;AAAA;;AAAA,6BAAA,MAAA;AAAA,UAAA,SAAA,eAAA,SAAA;AAAA,UAAA,YAAA,eAAA,YAAA;AAAA,UAAA,YAAA,eAAA,YAAA;AACA,WAAA,YAAA,GAAA,SAAA,GAAA,YAAA,IAAA,YAAA;;AAEA,UAAA,OAAA,KAAA,gBAAA,KAAA,UAAA,IAAA,SAAA,GAAA,EAAA,EAAA;AACA,aAAA,OAAA,GAAA,IAAA;AACA,aAAA,gBAAA,CAAA,UAAA,QAAA,EAAA;AACA;;AACA;;;;;;;AAOA;AACA;AACA,UAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AACA,SAZA;AAaA;AACA,KA9CA;AA+CA,IAAA,UA/CA,wBA+CA;AACA,UAAA,SAAA,GAAA,KAAA,KAAA,CAAA,uBAAA;AACA,MAAA,SAAA,CAAA,SAAA,GAAA,SAAA,CAAA,YAAA;AAEA,WAAA,YAAA,GAAA,KAAA;AACA,KApDA;AAqDA,IAAA,cArDA,0BAqDA,OArDA,EAqDA;AACA,WAAA,KAAA,CAAA,gBAAA,EAAA,OAAA;AACA;AAvDA;AAvEA,CAAA","sourcesContent":["<template>\n    <div ref=\"containerMessageDisplay\" :style=\"{background: colors.message.messagesDisplay.bg}\"\n         class=\"container-message-display\" @scroll=\"updateScrollState\">\n        <div v-if=\"loading\" class=\"loader\">\n            <div class=\"message-loading\"></div>\n        </div>\n        <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message-container\">\n            <MyMessage v-if=\"message.myself\" :message=\"message\" :async-mode=\"asyncMode\"\n                       :colors=\"colors\"\n                       :link-options=\"linkOptions.myself\"\n                       :profile-picture-config=\"profilePictureConfig\"\n                       :timestamp-config=\"timestampConfig\"\n                       @onImageClicked=\"onImageClicked\"/>\n            <OtherMessage v-else :message=\"message\" :async-mode=\"asyncMode\" \n                          :colors=\"colors\"\n                          :link-options=\"linkOptions.others\"\n                          :profile-picture-config=\"profilePictureConfig\"\n                          :timestamp-config=\"timestampConfig\"\n                          @onImageClicked=\"onImageClicked\"/>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {mapGetters, mapMutations} from 'vuex';\n    import { DateTime } from \"luxon\";\n    import MyMessage from './MyMessage.vue';\n    import OtherMessage from './OtherMessage.vue';\n    export default {\n        components:{\n            MyMessage,\n            OtherMessage\n        },\n        props: {\n            colors: {\n                type: Object,\n                required: true\n            },\n            asyncMode: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            loadMoreMessages: {\n                type: Function,\n                required: false,\n                default: null\n            },\n            /* onImageClicked: {\n                type: Function,\n                required: false,\n                default: null\n            }, */\n            scrollBottom: {\n                type: Object,\n                required: true\n            },\n            profilePictureConfig: {\n                type: Object,\n                required: true\n            },\n            timestampConfig: {\n                type: Object,\n                required: true\n            },\n            linkOptions: {\n                type: Object,\n                required: true\n            } \n        },\n        data() {\n            return {\n                updateScroll: true,\n                lastMessage: null,\n                loading: false,\n            }\n        },\n        computed: {\n            ...mapGetters([\n                'getParticipantById',\n                'messages',\n                'myself'\n            ]),\n        },\n        mounted() {\n            this.goToBottom();\n            this.$refs.containerMessageDisplay.dispatchEvent(new CustomEvent('scroll'));\n        },\n        updated() {\n            if (this.messages.length && !this.messageCompare(this.messages[this.messages.length - 1], this.lastMessage)) {\n                \n                if(this.updateScroll || (this.scrollBottom.messageSent && this.messages[this.messages.length - 1].participantId == this.myself.id) || (this.scrollBottom.messageReceived && this.messages[this.messages.length - 1].participantId != this.myself.id)){\n                    this.goToBottom();\n                    if (this.messages.length) {\n                        this.lastMessage = this.messages[this.messages.length - 1]\n                    }\n                }\n            }\n        },\n        methods: {\n            ...mapMutations([\n                'setMessages',\n            ]),\n            /**\n             * This function compare two messages without looking at the uploaded propertie.\n             * This function has been implemented to prevent chat scrolling down after changing the message from 'uploaded = false' to 'uploaded = true'.\n             * @param {Object} message1 the first message object \n             * @param {Object} message2 the second message object\n             * @return {Boolean} true if the messages are equal and false if they are different\n             */\n            messageCompare(message1, message2){\n                /**\n                 * if one of the messages are null, you can safely compare the messages with '==='\n                 */\n                if(!message2 || !message1){\n                    return message1 === message2\n                }\n                /**\n                 * compare the immutable properties of a message\n                 */\n                let participant_equal = message1.participantId == message2.participantId;\n                let content_equal = message1.content == message2.content;\n                let timestamp_equal = message1.timestamp.valueOf() === message2.timestamp.valueOf();\n\n                return  participant_equal && content_equal && timestamp_equal\n            },\n            updateScrollState({target: {scrollTop, clientHeight, scrollHeight}}) {\n                this.updateScroll = scrollTop + clientHeight >= scrollHeight;\n\n                if (typeof this.loadMoreMessages === 'function' && scrollTop < 20) {\n                    this.loading = true;\n                    this.loadMoreMessages((messages) => {\n                        //if (Array.isArray(messages) && messages.length > 0) {\n                            /** \n                             * this code will be removed before the next release\n                             * \n                             * this line is commented because the setMessages is already called\n                             * when 'this.messages.unshift(...this.toLoad)' is executed at App.vue line 177\n                             * it was executing the same function twice, causing unexpected behavior with Luxon date objects\n                            */\n                            //this.setMessages([...messages, ...this.messages]);\n                        //}\n                        this.loading = false;\n                    });\n                }\n            },\n            goToBottom() {\n                let scrollDiv = this.$refs.containerMessageDisplay;\n                scrollDiv.scrollTop = scrollDiv.scrollHeight;\n\n                this.updateScroll = false;\n            },\n            onImageClicked(message){\n                this.$emit(\"onImageClicked\", message)\n            }\n        }\n    }\n</script>\n\n<style lang=\"less\">\n    .quick-chat-container .container-message-display {\n        flex: 1;\n        overflow-y: scroll;\n        overflow-x: hidden;\n        display: flex;\n        flex-direction: column;\n        padding-bottom: 10px;\n        max-height: 100%;\n                /************** Safari 10.1+ ********************/\n        @media not all and (min-resolution:.001dpcm)\n        { @supports (-webkit-appearance:none) {\n\n            .message-container{\n                display:-webkit-box !important;\n            }\n            \n        }}\n\n        .message-image{\n            padding: 6px 10px;\n            border-radius: 15px;\n            margin: 5px 0 5px 0;\n            max-width: 70%;\n            position: relative;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .message-image-display{\n            width: 100%;\n            border-radius: 5px;\n            cursor:pointer;\n            transition: 0.3s ease;\n        }\n\n        .message-image-display:hover{\n            opacity: 0.8;\n        }\n\n        .message-text > p {\n            margin: 5px 0 5px 0;\n            font-size: 14px;\n        }\n\n        .my-message > .message-timestamp {\n            text-align: right;\n        }\n\n        /* .my-message {\n            justify-content: flex-end;\n            padding-right: 15px;\n            align-items: flex-end;\n        } */\n\n        .other-message {\n            justify-content: flex-start;\n            padding-left: 15px;\n            align-items: flex-start;\n        }\n\n        .other-message > .message-text {\n            color: #fff;\n            border-bottom-left-radius: 0;\n        }\n\n        .my-message > .message-text {\n            border-bottom-right-radius: 0;\n        }\n\n        .message-container {\n            display: flex;\n            flex-wrap: wrap;\n            flex-direction: column;\n        }\n\n        .message-username {\n            font-size: 10px;\n            font-weight: bold;\n        }\n\n        .icon-sent {\n            padding-left: 5px;\n            color: rgb(129, 127, 127);\n        }\n\n        .message-loading {\n            height: 8px;\n            width: 8px;\n            border: 1px solid rgb(187, 183, 183);\n            border-left-color: rgb(59, 59, 59);\n            border-radius: 50%;\n            margin-left: 5px;\n            display: inline-block;\n            animation: spin 1.3s ease infinite;\n        }\n\n        .loader .message-loading {\n            width: 16px;\n            height: 16px;\n            margin: 5px 0 0 0;\n        }\n\n        .img-loading{\n            height: 20px;\n            width: 20px;\n            border: 3px solid #ffffff00;\n            border-left-color: #847f7f;\n            border-top-color: #847f7f;\n            border-radius: 50%;\n            margin-left: 5px;\n            display: inline-block;\n            -webkit-animation: spin 1.0s ease infinite;\n            animation: spin 1.0s ease infinite;\n            position: absolute;\n        }\n        \n        .img-overlay{\n            opacity: 0.4;\n        }\n\n        .message-username-image{\n            margin: 10px 10px 0px 10px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n    }\n\n    @keyframes spin {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n"],"sourceRoot":"src/components"}]}